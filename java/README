XMMS2 Java client tutorials

This directory, or better the package org.xmms2.tutorial, 
contains sample Java programs to help you learn about what's
involved in writing an XMMS2 client. The Java files provided are fully commented
to explain the steps involved.

=== Building ===

You have to apply two patches to your current xmms2 tree which can either be latest
-stable (Dolittle) or some -devel right after that release. Without those patches
you won't be able to build and run the tutorials.

#1: http://bugs.xmms2.xmms.se/view.php?id=720
#2: http://bugs.xmms2.xmms.se/view.php?id=724

download both .patch files and apply them via

	cg-patch -c < patchfile.patch


To build the tutorials you need a jdk or gcj installed. Build every classfile
by issuing a command like

	javac -cp /usr/local/share/xmms2/java/xmms2java.jar org/xmms2/tutorial/Tut7.java

in this directory. The classpath argument should point to your xmms2java.jar.
If you set a PREFIX when installing xmms2 that package is somewhere else.

To run the programs call

	java -Djava.library.path="/usr/local/lib" -cp /usr/local/share/xmms2/java/xmms2java.jar:. \
		org.xmms2.tutorial.Tut7

It's maybe not necessary to set java.library.path here if libxmms2java.so is already in it.
That's e.g. the case if you set your PREFIX to /usr and so the library resides in /usr/lib
which is usually already in java.library.path. The defaultinstallation usually goes to
/usr/local and so the lib is in /usr/local/lib which is maybe no in java.library.path. And add
xmms2java.jar _and_ . (current directory) as shown above to the classpath. Otherwise startup
will fail.

=== Tutorial Descriptions ===

Tutorials 1 to 7 use the c-like api swig generates for you. If you want a better java-way use
the new java-api which makes everything a bit different. The java-api is quite easy to use
and follows the MVC-pattern (don't ask what a pattern is, buy a book, it will improve your
skillz). The java-api is explained in tutorials 8-10. It is quite different to use and
completely async and OO.

tut1:
Will show how to connect to the xmms2d and send a basic command
without reply

tut2:
How to do simple value retrieval. In this case the current playing id.

tut3:
How to retrieve data from the medialib, and dealing with dicts. This example
involves fetching the artist, title and bitrate of the currently playing
song in XMMS2.

tut4:
How to retrieve the current playlist from the server and use the knowlegde
gained in tut3 to print it out.

tut5:
On the topic of propdicts and dicts and foreaching dicts.

tut6:
Connect an async client to the JMain and recive a signal.

tut7:
Introduce signals and broadcasts using the JMain as it is intended
to be used.

===Start of nice java-api===

tut8:
Introduce the java-api and forget about the c-api again ;). Start playback
using the new api

tut9:
Retreive the title for the current id and print it out using the sync-way

tut10:
Extend the java-api knowledge by receiving configval_list via sync methodcalls

Tut11:
Receive information for the current track via the async way

Tut12:
Receive Playlist and print all tracks once via sync and then via async calls

tut13:
Introduce the use of signals and broadcasts in the new api. Also use some errorchecking
in the Xmms2Listener